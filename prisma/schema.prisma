// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User Model
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(STUDENT)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  createdCourses Course[]  @relation("CourseAuthor")
  enrolledCourses UserCourse[]
}

// User role enum
enum UserRole {
  STUDENT
  EDUCATOR
}

// Course model
model Course {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  imageUrl      String
  category      String
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  authorId      Int
  author        User      @relation("CourseAuthor", fields: [authorId], references: [id])
  lessons       Lesson[]
  enrolledUsers UserCourse[]
}

// Course-User relation (for tracking course enrollment and progress)
model UserCourse {
  id            Int       @id @default(autoincrement())
  userId        Int
  courseId      Int
  progress      Int       @default(0)
  completedLessons Int    @default(0)
  enrolledAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  completedLessonIds String // Stored as JSON string
  
  // Compound unique constraint to ensure a user doesn't enroll in the same course multiple times
  @@unique([userId, courseId])
}

// Course lesson model
model Lesson {
  id            Int       @id @default(autoincrement())
  title         String
  content       String?   @default("")
  order         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  courseId      Int
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
