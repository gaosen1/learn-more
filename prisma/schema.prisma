// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User Model
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(STUDENT)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  createdCourses Course[]  @relation("CourseAuthor")
  enrolledCourses UserCourse[]
  subscriptions   Subscription[]
  exercises       Exercise[]
  solutions       Solution[]
}

// User role enum
enum UserRole {
  STUDENT
  EDUCATOR
}

// Subscription Plan Enum
enum SubscriptionPlan {
  BASIC
  STANDARD 
  PREMIUM
  ENTERPRISE
}

// Subscription Status Enum
enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELLED
  EXPIRED
}

// Subscription Model
model Subscription {
  id          Int               @id @default(autoincrement())
  userId      Int
  plan        SubscriptionPlan
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime          @default(now())
  endDate     DateTime?
  price       Float
  billingCycle String            // monthly, quarterly, yearly
  features    String            // JSON string of features
  isArchived  Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  user        User              @relation(fields: [userId], references: [id])
}

// Course model
model Course {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  imageUrl      String
  category      String
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  authorId      Int
  author        User      @relation("CourseAuthor", fields: [authorId], references: [id])
  sections      Section[]
  enrolledUsers UserCourse[]
  lessons       Lesson[]
}

// Course section model (章节)
model Section {
  id            Int       @id @default(autoincrement())
  title         String
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  courseId      Int
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons       Lesson[]
}

// Course lesson model
model Lesson {
  id            Int       @id @default(autoincrement())
  title         String
  content       String?   @default("")
  order         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sectionId     Int
  section       Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  courseId      Int?
  course        Course?   @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

// Course-User relation (for tracking course enrollment and progress)
model UserCourse {
  id            Int       @id @default(autoincrement())
  userId        Int
  courseId      Int
  progress      Int       @default(0)
  completedLessons Int    @default(0)
  enrolledAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  completedLessonIds String // Stored as JSON string
  
  // Compound unique constraint to ensure a user doesn't enroll in the same course multiple times
  @@unique([userId, courseId])
}

// Programming exercise model
model Exercise {
  id          String     @id @default(uuid())
  userId      Int
  title       String
  description String     @db.Text
  language    String    // 'python', 'javascript', 等
  difficulty  String    // 'easy', 'medium', 'hard'
  category    String?   // 算法, 数据结构, 等
  initialCode String     @db.Text
  testCases   String     @db.Text  // 存储为JSON字符串
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 与用户的关系
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 与解决方案的关系
  solutions   Solution[]
}

// User submitted solutions
model Solution {
  id         String    @id @default(uuid())
  userId     Int
  exerciseId String
  code       String    @db.Text
  passed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationship with users and exercises
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise   Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([exerciseId])
}
