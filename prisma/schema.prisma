// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User Model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(STUDENT)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关系
  createdCourses Course[]  @relation("CourseAuthor")
  enrolledCourses UserCourse[]
}

// 用户角色枚举
enum UserRole {
  STUDENT
  EDUCATOR
}

// 课程模型
model Course {
  id            String    @id @default(uuid())
  title         String
  description   String
  imageUrl      String
  category      String
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关系
  authorId      String
  author        User      @relation("CourseAuthor", fields: [authorId], references: [id])
  lessons       Lesson[]
  enrolledUsers UserCourse[]
}

// 课程-用户关系（用于记录注册课程和进度）
model UserCourse {
  id            String    @id @default(uuid())
  userId        String
  courseId      String
  progress      Int       @default(0)
  completedLessons Int    @default(0)
  enrolledAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关系
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  completedLessonIds String // 存储为JSON字符串
  
  // 复合唯一约束，确保用户不会多次注册同一课程
  @@unique([userId, courseId])
}

// 课程章节模型
model Lesson {
  id            String    @id @default(uuid())
  title         String
  content       String?   @default("")
  order         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关系
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
